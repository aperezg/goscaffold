// Code generated by go-bindata.
// sources:
// doc/help
// templates/_.gitignore.tmpl
// templates/_Makefile.tmpl
// templates/_README.md.tmpl
// templates/_main.go.tmpl
// templates/_sum.go.tmpl
// templates/_sum_test.go.tmpl
// templates/structure.yml
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docHelp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x8f\xd3\x3e\x10\xc5\xef\xfd\x2b\xde\xe1\x7b\xf8\x82\x68\x7b\xe7\x44\xb5\x54\x6c\x25\xb6\xad\xb6\x45\x80\x10\x87\x89\x33\x49\xcc\x3a\x9e\xc8\x3f\x28\x0b\xe2\x7f\x47\xb6\xb7\x6d\x5a\x81\xb4\x91\x2a\x55\x89\xe7\x33\xf3\xde\x1b\xaf\x17\x77\xcb\x09\x00\xb4\xe2\x15\x35\x8d\x98\x1a\x53\xdc\x38\xa6\xc0\x20\x0c\x4e\xbe\xb1\x0a\x38\x7d\x6b\xc4\xe1\x51\xa2\x43\x2b\x86\x6c\x7b\x3c\xe0\x27\xbb\xcf\xeb\xcd\x76\xb7\xda\x5d\xc3\x54\x46\x4d\x8f\xa0\x56\x87\x2e\x56\x33\x25\xfd\x9c\x06\x76\xdc\x8e\xcf\x7e\xf1\xb1\x52\xd2\xf7\x64\x6b\x3f\x9b\xcd\xbe\x4e\xde\x2e\x77\x37\xf7\xab\xed\x7e\xb5\x59\x5f\x73\xc9\x18\x39\x3c\xd1\x41\xa8\xc8\x6b\x05\x1f\x5c\x54\xc1\x45\xfe\xe7\x9c\xaf\xd0\x44\x17\x3a\x76\xbd\x38\x4e\x27\xa0\xc8\x82\x2d\x55\xe6\x8c\x19\xf4\xc0\x46\x5b\x4e\xd3\x1a\xaa\x40\xb6\x46\xf4\x5c\x80\x47\x25\x07\x1d\x3a\xd4\xa2\x1e\xd8\xe5\xd9\xd2\x73\x29\xf6\xf5\xe9\x7d\x7a\x5e\x62\xdf\x31\x1a\xed\x7c\x00\xb9\x36\xf6\x6c\x13\xc4\x18\x54\x8c\xd0\x31\x2c\xf5\xec\x07\x52\x0c\x69\x4a\x2b\x1a\x06\xa3\x15\x05\x2d\xf6\x2f\x28\xcf\x4a\x6c\x7d\x66\x69\x9f\x31\xa3\xa2\x8c\xbc\xa8\x9c\x4e\x8b\x24\xa5\xf1\x31\xcd\x1f\x3a\xed\xcf\x84\x54\x7e\x32\x38\x88\x18\xb4\x6c\xd9\x15\x87\x7b\x6d\x75\x1f\x7b\x7c\x27\xa3\xeb\x93\x45\x57\xf4\xe2\xc7\xb3\xd8\xf5\x08\x6e\x0c\x2c\x2b\xf6\x9e\xdc\x23\x82\xa0\xe2\x56\xdb\xe2\xf0\x53\x7e\x62\xaf\xbd\x2e\x0d\x0f\xe2\x1e\x8a\x69\xbf\x4e\x7f\x7f\x43\x67\x03\x61\x25\xe4\xdc\x52\xef\x9a\x1b\x8a\x26\xe0\x5c\x70\x0c\x5f\x75\x64\x5b\x2e\xdd\x2e\x66\x9e\x2c\x3f\x2d\xee\xb6\xef\x97\x65\xa7\x73\x7a\x92\xb6\x4e\xdb\x16\xfc\x83\xfa\xc1\x30\x7c\x27\x07\xa4\x5f\x10\xe8\xf4\x26\x8b\x4d\x82\x64\x48\x11\xf8\xbc\x89\x69\x80\xa4\xf9\xbc\x11\xcf\xbf\x21\x3f\x2f\xae\xc8\x58\xf1\x7f\xef\x36\xdb\xc5\xfe\x76\x2e\x69\x9f\xe7\xde\xa9\x71\xbc\xc7\x2c\x26\x8b\x0f\xfb\xdb\xcd\x7d\x6e\xbc\xa8\x9d\x26\x8b\x6d\xa2\xe2\xff\x37\x2f\xfe\x04\x00\x00\xff\xff\xf8\x78\x8a\xdd\xfd\x03\x00\x00")

func docHelpBytes() ([]byte, error) {
	return bindataRead(
		_docHelp,
		"doc/help",
	)
}

func docHelp() (*asset, error) {
	bytes, err := docHelpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/help", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1518352085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_GitignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xcb\x4c\x49\x4d\xe4\x2a\x4b\xcd\x4b\xc9\x2f\xe2\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\xe5\xaa\xae\xd6\x73\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\xe5\x4a\xca\xcc\x03\x04\x00\x00\xff\xff\x74\xc8\x36\x6f\x2f\x00\x00\x00")

func templates_GitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_GitignoreTmpl,
		"templates/_.gitignore.tmpl",
	)
}

func templates_GitignoreTmpl() (*asset, error) {
	bytes, err := templates_GitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_.gitignore.tmpl", size: 47, mode: os.FileMode(420), modTime: time.Unix(1518372913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_makefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x4f\x6f\x1a\x31\x10\xc5\xcf\xf1\xa7\x18\x09\xa4\x24\x87\xdd\xed\xa1\xea\x61\x55\xa4\xf2\xaf\x04\x89\x2c\x15\x55\xa4\xe6\x52\x64\xec\x61\x71\x6b\x7b\x5c\xaf\x97\xa4\x42\x7c\xf7\xca\x06\xb6\x88\xcb\xfe\x79\x7e\xf3\x7b\xf6\x8c\xb9\xd6\x25\xec\x50\x3b\xc6\x46\x2f\xf3\xc5\x64\xfd\x75\xbe\x98\x96\x03\xc3\x95\xcd\x6b\x3a\x6b\x93\xf9\x0a\xca\x01\x6c\x94\x65\xa3\x79\x35\x5c\xbd\xae\xab\xe1\xf3\x34\x4a\x87\x43\x3e\x74\x4e\x2b\xc1\x83\x22\x5b\x71\x83\xc7\xe3\xc5\xb3\x98\x57\x2f\x3f\xa2\xa9\x7f\xb8\xaa\x3a\xae\xb5\xb2\xed\x3b\x63\xf9\xb7\xa7\x65\xf5\x7a\x0e\x8f\x0f\x28\xe1\x99\xff\xc6\xad\xd2\xc8\xee\xbe\x34\x28\x21\xb3\x70\xdf\x14\x3f\x7b\xbd\xa2\x70\xf7\xd0\xff\xcc\x58\xaf\xa7\x6c\x13\xd2\xa6\x27\xf4\x66\x35\x71\x09\x61\x87\xe0\xf1\x4f\xab\x3c\x82\x44\x87\x56\xa2\x15\x0a\x1b\xd8\x92\x4f\x8b\xce\xd3\x2f\x14\xa1\x4b\x3c\x23\xd8\x05\xc5\xee\x6a\x82\x1a\x03\x64\x2d\xd4\x2a\xec\xda\x4d\x2e\xc8\x14\x35\x69\x6e\xeb\x42\xa2\x2b\x84\x91\xf1\x1d\xf3\x37\xad\xd2\xb2\x84\x31\x19\xa7\x34\x02\x59\xf8\x4b\xad\x07\x7a\xb3\xc0\xbd\xd8\xa9\x80\x22\xb4\x1e\xbb\xb0\xe4\x67\xa7\xaa\x14\x94\x3e\x21\xdb\x43\x46\x37\x9d\x89\xbf\xdd\x0c\x8e\x31\x2c\x60\x13\x4a\x98\xbe\xa3\x68\x03\xa6\xb3\xd4\x04\x51\x04\x41\xc6\x70\x2b\xbb\x98\x28\xb2\x64\x4f\x21\xc9\x93\xed\x21\x2f\xf2\x3c\x8f\x24\xa1\x91\xdb\xff\xa8\x9a\x20\x29\xc0\xad\x04\x8f\x86\xf6\x27\xfc\x46\x59\xee\x15\x36\x1d\x37\xb9\xd8\xa9\x3a\x91\x4f\x42\x24\x7a\x6a\x9a\xb8\x0f\xa7\x74\x9a\xfe\xa5\x39\x59\x1a\x70\x09\xa3\x74\xd0\xab\x01\x40\x20\x48\x6b\xe0\x34\x0f\x5b\xf2\xe6\x92\x03\x57\x85\xec\x1a\xc2\xee\xc6\xb3\xe5\x7a\x5a\x0d\x47\x8b\xe9\x64\xf0\x01\x66\xcb\xe5\xf7\xc1\x89\x31\x5b\x0e\x57\xe3\xa7\x01\x37\xf2\xd3\x47\xb8\xed\xeb\x43\x77\x71\x1f\x8b\xfe\xc3\xf5\x85\x7c\xbc\xed\xf2\xbf\x00\x00\x00\xff\xff\x42\x05\x52\xd8\x02\x03\x00\x00")

func templates_makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_makefileTmpl,
		"templates/_Makefile.tmpl",
	)
}

func templates_makefileTmpl() (*asset, error) {
	bytes, err := templates_makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_Makefile.tmpl", size: 770, mode: os.FileMode(420), modTime: time.Unix(1518373605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_readmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\xd6\x73\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\xe5\xe2\x72\xcf\xcf\x49\xcc\x4b\x57\x48\x2c\x28\x50\x48\x2e\x4a\x4d\x2c\x49\x4d\x51\x28\xcf\x2c\xc9\x50\x48\xcf\x2f\x4e\x4e\x4c\x4b\xcb\xcf\x49\xd1\x03\x04\x00\x00\xff\xff\x8f\x2a\x85\xc2\x3b\x00\x00\x00")

func templates_readmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_readmeMdTmpl,
		"templates/_README.md.tmpl",
	)
}

func templates_readmeMdTmpl() (*asset, error) {
	bytes, err := templates_readmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_README.md.tmpl", size: 59, mode: os.FileMode(420), modTime: time.Unix(1518343816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x41\x0a\x02\x21\x14\x06\xe0\xb5\xff\x29\xc4\x95\x12\x18\xcc\x41\x22\xe8\x04\x0f\xd1\x90\xfa\x4d\x46\xdf\x4a\xbc\x7b\x30\x07\xf8\xba\xa4\x8f\xbc\xb3\xa5\xd4\x06\x54\xf6\xdf\x39\xad\x87\x71\x85\xd3\xc1\xb8\xb5\xe2\x43\x98\x47\x97\x94\xf7\xbe\x0f\xa5\x43\x00\x8a\xb6\x74\x19\x1f\xec\x82\x29\x9c\xf1\x79\xd6\x36\xbf\xcd\x0f\x65\x7c\x29\xfd\x71\x3b\x42\xc0\xfe\x07\x00\x00\xff\xff\x81\x30\x22\x85\x61\x00\x00\x00")

func templates_mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_mainGoTmpl,
		"templates/_main.go.tmpl",
	)
}

func templates_mainGoTmpl() (*asset, error) {
	bytes, err := templates_mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_main.go.tmpl", size: 97, mode: os.FileMode(420), modTime: time.Unix(1518354054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_sumGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\xcd\xe5\xe2\x4a\x2b\xcd\x4b\x56\x08\x2e\xcd\xd5\xa8\x50\xc8\xcc\x2b\xd1\x51\xa8\x04\x51\x9a\x20\x42\xa1\x9a\x8b\xb3\x28\xb5\xa4\xb4\x28\x4f\xa1\x42\x41\x5b\xa1\x92\xab\x96\x0b\x10\x00\x00\xff\xff\xfd\x40\xe1\x9a\x3a\x00\x00\x00")

func templates_sumGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_sumGoTmpl,
		"templates/_sum.go.tmpl",
	)
}

func templates_sumGoTmpl() (*asset, error) {
	bytes, err := templates_sumGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_sum.go.tmpl", size: 58, mode: os.FileMode(420), modTime: time.Unix(1518344017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_sum_testGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x4d\xca\x83\x30\x14\x45\xe7\x6f\x15\xf7\x0b\x7c\xa0\x25\x38\x10\x47\x82\xc3\xae\x40\x37\x10\xd2\x28\xa1\x4d\x22\x2f\x2f\x38\x28\xee\xbd\xf8\x33\xbb\xdc\x73\x38\xab\xb1\x6f\xb3\x38\xe4\x12\x88\x7c\x58\x13\x0b\x94\xb8\x2c\x3e\x2e\x8a\x68\x2e\xd1\x62\x72\x59\xc6\x12\x2a\xc1\xe3\x26\xcd\x54\xe3\x4b\x00\x20\x49\xcc\x07\xfd\x80\x43\x68\x35\xda\xfa\xbc\xfd\x7c\x93\xbf\x01\xdd\xad\x1e\x76\xf3\x64\x4e\x3c\x57\x6a\x2c\x01\x9b\xc9\xf0\xd1\x26\x66\x67\x45\x63\x49\xd2\xe3\xff\xa5\xb1\x99\x78\xae\x46\xe9\xab\xa2\xd1\x5d\xd9\x9d\xf6\x5f\x00\x00\x00\xff\xff\x76\xdf\xf4\x58\xb1\x00\x00\x00")

func templates_sum_testGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_sum_testGoTmpl,
		"templates/_sum_test.go.tmpl",
	)
}

func templates_sum_testGoTmpl() (*asset, error) {
	bytes, err := templates_sum_testGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_sum_test.go.tmpl", size: 177, mode: os.FileMode(420), modTime: time.Unix(1518344179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStructureYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x55\x48\xcb\xcc\x49\xf5\x4b\xcc\x4d\xb5\x52\x88\x0f\x72\x75\x74\xf1\x75\xd5\xcb\x4d\xd1\x2b\xc9\x2d\xc8\xe1\x52\x50\x28\x48\x2c\xc9\xb0\x52\x50\x52\xe2\x42\x51\xa6\x97\x9e\x59\x92\x99\x9e\x97\x5f\x94\x8a\x5f\x5d\x6e\x62\x66\x9e\x5e\x7a\x3e\x7e\x45\xc5\xa5\xb9\x98\x6a\x8a\x4b\x73\x31\x95\xc5\x97\xa4\x16\x97\xe0\x50\x0b\x08\x00\x00\xff\xff\xdc\x1c\x17\x57\xc7\x00\x00\x00")

func templatesStructureYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructureYml,
		"templates/structure.yml",
	)
}

func templatesStructureYml() (*asset, error) {
	bytes, err := templatesStructureYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/structure.yml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1518353672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/help": docHelp,
	"templates/_.gitignore.tmpl": templates_GitignoreTmpl,
	"templates/_Makefile.tmpl": templates_makefileTmpl,
	"templates/_README.md.tmpl": templates_readmeMdTmpl,
	"templates/_main.go.tmpl": templates_mainGoTmpl,
	"templates/_sum.go.tmpl": templates_sumGoTmpl,
	"templates/_sum_test.go.tmpl": templates_sum_testGoTmpl,
	"templates/structure.yml": templatesStructureYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"help": &bintree{docHelp, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"_.gitignore.tmpl": &bintree{templates_GitignoreTmpl, map[string]*bintree{}},
		"_Makefile.tmpl": &bintree{templates_makefileTmpl, map[string]*bintree{}},
		"_README.md.tmpl": &bintree{templates_readmeMdTmpl, map[string]*bintree{}},
		"_main.go.tmpl": &bintree{templates_mainGoTmpl, map[string]*bintree{}},
		"_sum.go.tmpl": &bintree{templates_sumGoTmpl, map[string]*bintree{}},
		"_sum_test.go.tmpl": &bintree{templates_sum_testGoTmpl, map[string]*bintree{}},
		"structure.yml": &bintree{templatesStructureYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

