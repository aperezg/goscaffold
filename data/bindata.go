// Code generated by go-bindata.
// sources:
// doc/help
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docHelp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xdf\x6f\xd3\x40\x0c\xc7\xdf\xfb\x57\xf8\x81\x07\x40\x6b\xf7\xce\x13\xd5\xa8\xd8\x24\xd6\x56\x6b\x11\x20\xc4\x83\x73\x71\x12\xb3\xcb\x39\xba\x1f\x84\x82\xf8\xdf\xd1\xdd\x35\x49\xdb\x81\xb4\x48\x93\xa6\xab\xfd\xb1\xbf\xfe\xda\xeb\xe5\xfd\x6a\x06\x00\x50\x8b\x53\x58\x55\xa2\x4b\x98\xc3\x8d\x25\xf4\x04\x08\x9d\x95\xef\xa4\x3c\x8c\xbf\x55\x62\xe1\x20\xc1\x42\x2d\x1a\x4d\x3d\x04\xb8\xd9\xee\xcb\x7a\xb3\xdd\xdd\xed\x2e\x61\x2a\xa1\xe6\x03\xa8\x66\xdf\x84\x62\xa1\xa4\xbd\xc6\x8e\x2c\xd5\xa7\xb1\x5f\x5d\x28\x94\xb4\x2d\x9a\xd2\x2d\x16\x8b\x6f\xb3\x77\xab\xdd\xcd\xc3\xdd\x76\x7f\xb7\x59\x5f\x72\x51\x6b\xe9\x8f\x74\x40\x28\xd0\xb1\x02\xe7\x6d\x50\xde\x06\xfa\x6f\x9f\x57\x50\x05\xeb\x1b\xb2\xad\x58\x8a\x11\xa0\xd0\x00\x19\x2c\xf4\x84\xe9\xb8\x23\xcd\x86\x62\xb7\x1a\x0b\x40\x53\x42\x70\x94\x81\x83\x92\x9e\x7d\x03\xa5\xa8\x47\xb2\xa9\xb7\xf8\x9d\x8b\x7d\x33\xbe\xc7\xef\x35\xec\x1b\x82\x8a\xad\xf3\x80\xb6\x0e\x2d\x99\x08\xd1\x1a\x0a\x02\xdf\x10\x74\xe8\x1b\xe8\x1b\xb2\x4f\x0a\xe5\x98\x0c\x2f\xaf\xa0\x38\x40\x49\x15\x06\xed\x53\x9e\x17\xd1\x39\x28\x98\x92\xac\xf3\xb1\x5d\xdf\xa0\xcf\x98\x5e\xec\xa3\xeb\x50\x11\xb0\x83\x17\xef\x37\xdb\xe5\xfe\xf6\xda\x59\x75\x75\xd6\x5d\x11\xfc\x38\x0d\xd5\xa0\xa9\x09\xf8\xa8\x31\xd6\x98\x20\x47\x7f\xfe\x21\xcd\x91\x12\x53\x4e\xda\xd8\xa5\x54\xec\x3a\xcd\x0a\x3d\x8b\x01\x83\x2d\x9d\x65\xce\xe7\x79\xc4\x8a\xe1\x53\xae\xc5\x6e\x22\xc4\xf4\xd1\xf0\x24\xb3\x26\x43\x36\x3b\xde\xb2\xe1\x36\xb4\xf0\x03\x35\x97\xa3\x65\x17\xf4\xec\xcf\xb3\xd8\xe5\x09\x5c\x6b\x30\xa4\xc8\x39\xb4\x07\xf0\x02\x05\xd5\x6c\xf2\x34\x8e\xfb\x24\xe6\xd2\xfb\x5c\x70\x1a\xd4\xef\xf1\xdf\x3f\xc0\x55\x1a\xae\x11\x9f\xf6\x28\xd6\x1e\x1c\x9c\x12\x2e\xc6\xdf\x3f\xe9\x79\xb6\xfa\xbc\xbc\xdf\x7e\x58\xe5\x1b\x4b\xdb\x24\xf1\x0a\xd8\xd4\x40\x3f\xb1\xed\x34\x81\x6b\xa4\x87\xf8\xe7\x05\x38\xbe\x24\xb1\x51\x90\x74\xd1\x02\x97\x2e\x63\x58\x9b\x69\x43\x9f\x7f\xb1\xbf\xce\x4e\xf6\x54\xf1\xb0\x5c\x12\xef\x2b\xae\xd8\xa9\xbd\x83\x17\xb3\xe5\xc7\xfd\xed\xe6\x21\x15\x5e\x96\x96\xd1\xc0\x36\x52\xe1\x65\x86\x2f\x30\x3d\xbe\xad\x5b\x64\x1d\xab\xbe\xfa\x1b\x00\x00\xff\xff\xaf\x81\x5c\x25\xa3\x04\x00\x00")

func docHelpBytes() ([]byte, error) {
	return bindataRead(
		_docHelp,
		"doc/help",
	)
}

func docHelp() (*asset, error) {
	bytes, err := docHelpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/help", size: 1187, mode: os.FileMode(420), modTime: time.Unix(1518289784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/help": docHelp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"help": &bintree{docHelp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

