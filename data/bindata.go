// Code generated by go-bindata.
// sources:
// doc/help
// templates/_.gitignore.tmpl
// templates/_Makefile.tmpl
// templates/_README.md.tmpl
// templates/_main.go.tmpl
// templates/_sum.go.tmpl
// templates/_sum_test.go.tmpl
// templates/structure.yml
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docHelp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4b\x8f\xd3\x30\x14\x85\xf7\xfd\x15\x67\xc1\x02\x10\x69\xf7\xac\xa8\x86\x8a\xa9\xc4\xb4\xd5\xb4\x08\x10\x62\x71\xe3\xdc\x24\x66\x6c\xdf\xc8\x0f\xca\x43\xfc\x77\x64\x67\xfa\x14\x48\x63\xa9\x52\xe5\xf8\x7e\x3e\xe7\xf8\xac\xe6\x77\x8b\x09\x00\x74\x12\x14\xb5\xad\x98\x06\x15\x6e\x3c\x53\x64\x10\x06\x2f\xdf\x58\x45\x1c\xbf\xb5\xe2\xf1\x53\x92\x47\x27\x86\x5c\x77\x38\x10\x26\xdb\xcf\xab\xf5\x66\xbb\xdc\x5e\xc3\x54\x41\x55\x07\x50\xa7\x63\x9f\xea\xa9\x12\x3b\xa3\x81\x3d\x77\xe7\x67\xbf\x84\x54\x2b\xb1\x96\x5c\x13\xa6\xd3\xe9\xd7\xc9\xdb\xc5\xf6\xe6\x7e\xb9\xd9\x2d\xd7\xab\x6b\x2e\x19\x23\xfb\x47\x3a\x08\x35\x05\xad\x10\xa2\x4f\x2a\xfa\xc4\xff\xd5\xf9\x0a\x6d\xf2\xb1\x67\x6f\xc5\x73\x3e\x01\x45\x0e\xec\xa8\x36\x27\xcc\xa0\x07\x36\xda\x71\x56\x6b\xa8\x06\xb9\x06\x29\xf0\x08\x3c\x38\xd9\xeb\xd8\xa3\x11\xf5\xc0\xbe\x68\xcb\xeb\xd2\xec\xeb\xe3\x7e\x5e\x2f\xb1\xeb\x19\xad\xf6\x21\x82\x7c\x97\x2c\xbb\x0c\x31\x06\x35\x23\xf6\x0c\x47\x96\xc3\x40\x8a\x21\xed\x78\x15\x0d\x83\xd1\x8a\xa2\x16\xf7\x0f\x54\x60\x25\xae\x39\xb1\x74\x28\x98\xb3\xa1\x82\xbc\x98\xac\xaa\xd1\x92\xd2\xf8\x98\xf5\xc7\x5e\x87\x13\x21\x8f\x1f\x03\x8e\x22\x06\x1d\x3b\xf6\x63\xc2\x56\x3b\x6d\x93\xc5\x77\x32\xba\x39\x46\x74\x45\xdf\x8b\x7f\x18\x3d\xfc\x3e\xfe\xfd\x03\x5d\xfc\xc0\x49\x2c\x31\xe6\x6b\x1a\x6e\x29\x99\x88\xd3\xc0\xe1\x2d\x54\x4f\xae\xe3\x31\xde\x0b\x79\x93\xc5\xa7\xf9\xdd\xe6\xfd\x62\xac\x58\x09\x53\x72\x09\xb4\xeb\xc0\x3f\xc8\x0e\x86\x11\x7a\xd9\x23\xff\xa2\x40\xe7\x9d\xe2\x8b\x8c\x81\x0c\x39\x91\x50\x8a\x91\x05\x64\x7b\xa7\x07\x7a\x7a\x61\x7f\x5d\x34\xf6\xdc\xf1\xb3\x77\xeb\xcd\x7c\x77\x3b\x93\x5c\xaf\x59\xf0\xea\x3c\xed\xaa\x7a\xac\xca\xfc\xc3\xee\x76\x7d\x5f\x2e\x9e\x37\x5e\x93\xc3\x26\x53\xf1\xfc\xcd\x8b\xbf\x01\x00\x00\xff\xff\xf5\x2c\xc3\x37\x8c\x03\x00\x00")

func docHelpBytes() ([]byte, error) {
	return bindataRead(
		_docHelp,
		"doc/help",
	)
}

func docHelp() (*asset, error) {
	bytes, err := docHelpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/help", size: 908, mode: os.FileMode(420), modTime: time.Unix(1518382570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_GitignoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xcb\x4c\x49\x4d\xe4\x2a\x4b\xcd\x4b\xc9\x2f\xe2\xd2\x73\x09\x8e\x0f\x2e\xc9\x2f\x4a\xe5\xaa\xae\xd6\x73\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\xe5\x4a\xca\xcc\x03\x04\x00\x00\xff\xff\x74\xc8\x36\x6f\x2f\x00\x00\x00")

func templates_GitignoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_GitignoreTmpl,
		"templates/_.gitignore.tmpl",
	)
}

func templates_GitignoreTmpl() (*asset, error) {
	bytes, err := templates_GitignoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_.gitignore.tmpl", size: 47, mode: os.FileMode(420), modTime: time.Unix(1518372913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_makefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\x4f\x6f\x1a\x31\x10\xc5\xcf\xf8\x53\x8c\x04\x52\x92\x03\xbb\x3d\x54\x3d\xac\x8a\x54\xfe\x95\x20\x91\xa5\xa2\x8a\xd4\x5c\x8a\x8c\x3d\x2c\x6e\x6d\x8f\xeb\xf5\x26\xa9\x10\xdf\xbd\xb2\x81\xed\x26\x97\xfd\xf3\xfc\xe6\xf7\xec\x19\x73\xad\x0b\x38\xa0\x76\x8c\x4d\x1e\x97\xab\xd9\xf6\xeb\x72\x35\x2f\x46\x86\x2b\x9b\x55\x74\xd1\x66\xcb\x0d\x14\x23\xd8\x29\xcb\x26\xcb\x72\xbc\x79\xda\x96\xe3\x87\x79\x94\x8e\xc7\x6c\xec\x9c\x56\x82\x07\x45\xb6\xe4\x06\x4f\xa7\xab\x67\xb5\x2c\x1f\x7f\x44\xd3\xe0\xd8\xa9\x3a\x6d\xb5\xb2\xcd\x2b\x63\xd9\xb7\xfb\x75\xf9\x74\x09\x8f\x0f\x28\xe0\x81\xff\xc6\xbd\xd2\xc8\x7a\x5f\x6a\x94\x30\xb4\x70\x53\xe7\x3f\xfb\xfd\x3c\x77\x37\x30\xf8\xcc\x58\xbf\xaf\x6c\x1d\xd2\xa6\x67\xf4\x62\x35\x71\x09\xe1\x80\xe0\xf1\x4f\xa3\x3c\x82\x44\x87\x56\xa2\x15\x0a\x6b\xd8\x93\x4f\x8b\xce\xd3\x2f\x14\xa1\x4d\xbc\x20\xd8\x15\xc5\x7a\x15\x41\x85\x01\x86\x0d\x54\x2a\x1c\x9a\x5d\x26\xc8\xe4\x15\x69\x6e\xab\x5c\xa2\xcb\x85\x91\xf1\x1d\xf3\x77\x8d\xd2\xb2\x80\x29\x19\xa7\x34\x02\x59\xf8\x4b\x8d\x07\x7a\xb1\xc0\xbd\x38\xa8\x80\x22\x34\x1e\xdb\xb0\xe4\x67\xe7\xaa\x14\x94\x3e\x61\x48\xef\xda\x12\x7f\xdb\x01\x9c\x62\x52\xc0\x3a\x14\x30\x7f\x45\xd1\x04\x4c\x07\xa9\x08\xa2\x08\x82\x8c\xe1\x56\xb6\x19\x51\x64\xc9\x9e\x12\x92\x67\xf8\x0c\x59\x9e\x65\x59\x24\x09\x8d\xdc\xfe\x47\x55\x04\x49\x01\x6e\x25\x78\x34\xf4\x7c\xc6\xef\x94\xe5\x5e\x61\xdd\x72\x93\x8b\x9d\xab\x13\xf9\x2c\x44\xa2\xa7\xba\x8e\xfb\x70\x4a\xa7\xd1\x5f\x3b\x33\x4c\xd3\x2d\x60\x92\x4e\xd9\xe9\x3e\x04\x82\xb4\x06\x4e\xf3\xb0\x27\x6f\xae\x39\xd0\x29\x64\x5d\x08\xeb\x4d\x17\xeb\xed\xbc\x1c\x4f\x56\xf3\xd9\xe8\x03\x2c\xd6\xeb\xef\xa3\x33\x63\xb1\x1e\x6f\xa6\xf7\x23\x6e\xe4\xa7\x8f\xf0\xa6\xa9\xb7\xed\x95\xbd\xcb\x07\xb7\xdd\xab\x78\xf7\xbe\xc5\xff\x02\x00\x00\xff\xff\xa2\xfe\x87\x3b\xfc\x02\x00\x00")

func templates_makefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_makefileTmpl,
		"templates/_Makefile.tmpl",
	)
}

func templates_makefileTmpl() (*asset, error) {
	bytes, err := templates_makefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_Makefile.tmpl", size: 764, mode: os.FileMode(420), modTime: time.Unix(1518377246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_readmeMdTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\xd6\x73\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xf3\x4b\xcc\x4d\xad\xad\xe5\xe2\x72\xcf\xcf\x49\xcc\x4b\x57\x48\x2c\x28\x50\x48\x2e\x4a\x4d\x2c\x49\x4d\x51\x28\xcf\x2c\xc9\x50\x48\xcf\x2f\x4e\x4e\x4c\x4b\xcb\xcf\x49\xd1\x03\x04\x00\x00\xff\xff\x8f\x2a\x85\xc2\x3b\x00\x00\x00")

func templates_readmeMdTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_readmeMdTmpl,
		"templates/_README.md.tmpl",
	)
}

func templates_readmeMdTmpl() (*asset, error) {
	bytes, err := templates_readmeMdTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_README.md.tmpl", size: 59, mode: os.FileMode(420), modTime: time.Unix(1518343816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x41\x0a\x02\x21\x14\x06\xe0\xb5\xff\x29\xc4\x95\x12\x18\xcc\x41\x22\xe8\x04\x0f\xd1\x90\xfa\x4d\x46\xdf\x4a\xbc\x7b\x30\x07\xf8\xba\xa4\x8f\xbc\xb3\xa5\xd4\x06\x54\xf6\xdf\x39\xad\x87\x71\x85\xd3\xc1\xb8\xb5\xe2\x43\x98\x47\x97\x94\xf7\xbe\x0f\xa5\x43\x00\x8a\xb6\x74\x19\x1f\xec\x82\x29\x9c\xf1\x79\xd6\x36\xbf\xcd\x0f\x65\x7c\x29\xfd\x71\x3b\x42\xc0\xfe\x07\x00\x00\xff\xff\x81\x30\x22\x85\x61\x00\x00\x00")

func templates_mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_mainGoTmpl,
		"templates/_main.go.tmpl",
	)
}

func templates_mainGoTmpl() (*asset, error) {
	bytes, err := templates_mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_main.go.tmpl", size: 97, mode: os.FileMode(420), modTime: time.Unix(1518354054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_sumGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\xcd\xe5\xe2\x4a\x2b\xcd\x4b\x56\x08\x2e\xcd\xd5\xa8\x50\xc8\xcc\x2b\xd1\x51\xa8\x04\x51\x9a\x20\x42\xa1\x9a\x8b\xb3\x28\xb5\xa4\xb4\x28\x4f\xa1\x42\x41\x5b\xa1\x92\xab\x96\x0b\x10\x00\x00\xff\xff\xfd\x40\xe1\x9a\x3a\x00\x00\x00")

func templates_sumGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_sumGoTmpl,
		"templates/_sum.go.tmpl",
	)
}

func templates_sumGoTmpl() (*asset, error) {
	bytes, err := templates_sumGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_sum.go.tmpl", size: 58, mode: os.FileMode(420), modTime: time.Unix(1518344017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_sum_testGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8c\x4d\xca\x83\x30\x14\x45\xe7\x6f\x15\xf7\x0b\x7c\xa0\x25\x38\x10\x47\x82\xc3\xae\x40\x37\x10\xd2\x28\xa1\x4d\x22\x2f\x2f\x38\x28\xee\xbd\xf8\x33\xbb\xdc\x73\x38\xab\xb1\x6f\xb3\x38\xe4\x12\x88\x7c\x58\x13\x0b\x94\xb8\x2c\x3e\x2e\x8a\x68\x2e\xd1\x62\x72\x59\xc6\x12\x2a\xc1\xe3\x26\xcd\x54\xe3\x4b\x00\x20\x49\xcc\x07\xfd\x80\x43\x68\x35\xda\xfa\xbc\xfd\x7c\x93\xbf\x01\xdd\xad\x1e\x76\xf3\x64\x4e\x3c\x57\x6a\x2c\x01\x9b\xc9\xf0\xd1\x26\x66\x67\x45\x63\x49\xd2\xe3\xff\xa5\xb1\x99\x78\xae\x46\xe9\xab\xa2\xd1\x5d\xd9\x9d\xf6\x5f\x00\x00\x00\xff\xff\x76\xdf\xf4\x58\xb1\x00\x00\x00")

func templates_sum_testGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templates_sum_testGoTmpl,
		"templates/_sum_test.go.tmpl",
	)
}

func templates_sum_testGoTmpl() (*asset, error) {
	bytes, err := templates_sum_testGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_sum_test.go.tmpl", size: 177, mode: os.FileMode(420), modTime: time.Unix(1518344179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStructureYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x55\x48\xcb\xcc\x49\xf5\x4b\xcc\x4d\xb5\x52\x88\x0f\x72\x75\x74\xf1\x75\xd5\xcb\x4d\xd1\x2b\xc9\x2d\xc8\xe1\x52\x50\x28\x48\x2c\xc9\xb0\x52\x50\x52\xe2\x42\x51\xa6\x97\x9e\x59\x92\x99\x9e\x97\x5f\x94\x8a\x5f\x5d\x6e\x62\x66\x9e\x5e\x7a\x3e\x7e\x45\xc5\xa5\xb9\x98\x6a\x8a\x4b\x73\x31\x95\xc5\x97\xa4\x16\x97\xe0\x50\x0b\x08\x00\x00\xff\xff\xdc\x1c\x17\x57\xc7\x00\x00\x00")

func templatesStructureYmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructureYml,
		"templates/structure.yml",
	)
}

func templatesStructureYml() (*asset, error) {
	bytes, err := templatesStructureYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/structure.yml", size: 199, mode: os.FileMode(420), modTime: time.Unix(1518353672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/help": docHelp,
	"templates/_.gitignore.tmpl": templates_GitignoreTmpl,
	"templates/_Makefile.tmpl": templates_makefileTmpl,
	"templates/_README.md.tmpl": templates_readmeMdTmpl,
	"templates/_main.go.tmpl": templates_mainGoTmpl,
	"templates/_sum.go.tmpl": templates_sumGoTmpl,
	"templates/_sum_test.go.tmpl": templates_sum_testGoTmpl,
	"templates/structure.yml": templatesStructureYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"help": &bintree{docHelp, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"_.gitignore.tmpl": &bintree{templates_GitignoreTmpl, map[string]*bintree{}},
		"_Makefile.tmpl": &bintree{templates_makefileTmpl, map[string]*bintree{}},
		"_README.md.tmpl": &bintree{templates_readmeMdTmpl, map[string]*bintree{}},
		"_main.go.tmpl": &bintree{templates_mainGoTmpl, map[string]*bintree{}},
		"_sum.go.tmpl": &bintree{templates_sumGoTmpl, map[string]*bintree{}},
		"_sum_test.go.tmpl": &bintree{templates_sum_testGoTmpl, map[string]*bintree{}},
		"structure.yml": &bintree{templatesStructureYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

