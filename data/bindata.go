// Code generated by go-bindata.
// sources:
// doc/help
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docHelp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcf\x8f\xd3\x3e\x10\xc5\xef\xfd\x2b\xde\xe1\x7b\xf8\x82\x68\x7b\xe7\x44\xb5\x54\x6c\x25\xb6\xad\xb6\x45\x80\x10\x87\x89\x33\x49\xcc\x3a\x9e\xc8\x3f\x28\x0b\xe2\x7f\x47\xb6\xb7\x6d\x5a\x81\xb4\x91\x2a\x55\x89\xe7\x33\xf3\xde\x1b\xaf\x17\x77\xcb\x09\x00\xb4\xe2\x15\x35\x8d\x98\x1a\x53\xdc\x38\xa6\xc0\x20\x0c\x4e\xbe\xb1\x0a\x38\x7d\x6b\xc4\xe1\x51\xa2\x43\x2b\x86\x6c\x7b\x3c\xe0\x27\xbb\xcf\xeb\xcd\x76\xb7\xda\x5d\xc3\x54\x46\x4d\x8f\xa0\x56\x87\x2e\x56\x33\x25\xfd\x9c\x06\x76\xdc\x8e\xcf\x7e\xf1\xb1\x52\xd2\xf7\x64\x6b\x3f\x9b\xcd\xbe\x4e\xde\x2e\x77\x37\xf7\xab\xed\x7e\xb5\x59\x5f\x73\xc9\x18\x39\x3c\xd1\x41\xa8\xc8\x6b\x05\x1f\x5c\x54\xc1\x45\xfe\xe7\x9c\xaf\xd0\x44\x17\x3a\x76\xbd\x38\x4e\x27\xa0\xc8\x82\x2d\x55\xe6\x8c\x19\xf4\xc0\x46\x5b\x4e\xd3\x1a\xaa\x40\xb6\x46\xf4\x5c\x80\x47\x25\x07\x1d\x3a\xd4\xa2\x1e\xd8\xe5\xd9\xd2\x73\x29\xf6\xf5\xe9\x7d\x7a\x5e\x62\xdf\x31\x1a\xed\x7c\x00\xb9\x36\xf6\x6c\x13\xc4\x18\x54\x8c\xd0\x31\x2c\xf5\xec\x07\x52\x0c\x69\x4a\x2b\x1a\x06\xa3\x15\x05\x2d\xf6\x2f\x28\xcf\x4a\x6c\x7d\x66\x69\x9f\x31\xa3\xa2\x8c\xbc\xa8\x9c\x4e\x8b\x24\xa5\xf1\x31\xcd\x1f\x3a\xed\xcf\x84\x54\x7e\x32\x38\x88\x18\xb4\x6c\xd9\x15\x87\x7b\x6d\x75\x1f\x7b\x7c\x27\xa3\xeb\x93\x45\x57\xf4\xe2\xc7\xb3\xd8\xf5\x08\x6e\x0c\x2c\x2b\xf6\x9e\xdc\x23\x82\xa0\xe2\x56\xdb\xe2\xf0\x53\x7e\x62\xaf\xbd\x2e\x0d\x0f\xe2\x1e\x8a\x69\xbf\x4e\x7f\x7f\x43\x67\x03\x61\x25\xe4\xdc\x52\xef\x9a\x1b\x8a\x26\xe0\x5c\x70\x0c\x5f\x75\x64\x5b\x2e\xdd\x2e\x66\x9e\x2c\x3f\x2d\xee\xb6\xef\x97\x65\xa7\x73\x7a\x92\xb6\x4e\xdb\x16\xfc\x83\xfa\xc1\x30\x7c\x27\x07\xa4\x5f\x10\xe8\xf4\x26\x8b\x4d\x82\x64\x48\x11\xf8\xbc\x89\x69\x80\xa4\xf9\xbc\x11\xcf\xbf\x21\x3f\x2f\xae\xc8\x58\xf1\x7f\xef\x36\xdb\xc5\xfe\x76\x2e\x69\x9f\xe7\xde\xa9\x71\xbc\xc7\x2c\x26\x8b\x0f\xfb\xdb\xcd\x7d\x6e\xbc\xa8\x9d\x26\x8b\x6d\xa2\xe2\xff\x37\x2f\xfe\x04\x00\x00\xff\xff\xf8\x78\x8a\xdd\xfd\x03\x00\x00")

func docHelpBytes() ([]byte, error) {
	return bindataRead(
		_docHelp,
		"doc/help",
	)
}

func docHelp() (*asset, error) {
	bytes, err := docHelpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/help", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1518352085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/help": docHelp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"help": &bintree{docHelp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

